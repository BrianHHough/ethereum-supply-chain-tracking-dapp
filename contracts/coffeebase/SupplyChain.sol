pragma solidity >=0.4.24;
// Update pragma solidity statement to be less restrictive with >= instead of ^

// Define a contract 'Supplychain'
/* 
WHAT THE SUPPLY CHAIN SHOULD TRACK:
- Product ID
- Product UPC
- Origination Information
- Origin Actor (e.g. Farmer ID, Farmer Name, )
- Misc. organization information (e.g. Farmer Information)
- Misc. organization information (e.g. Farmer Information)
- Longitude and Latitude of Origin Coordinates (e.g. Farmâ€™s
- Longitude and Latitude)
- Product notes
- Product price
*/

// NOTE: don't need to do "../contracts/.. before b/c already in the contracts master folder so can call these files on command
import "../coffeeaccesscontrol/ConsumerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
// You should inherit the Ownable.sol smart contract here and leverage the modifiers defined in that smart contract and use it below as well (line 27)
import "../coffeecore/Ownable.sol";

// leverage modifiers defined in the Ownable smart contract and use it here:
contract SupplyChain is Ownable, ConsumerRole, DistributorRole, FarmerRole, RetailerRole {

  // Define 'owner'
  address contractOwner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  // uint => Item
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, that track its journey through the supply chain -- to be sent from DApp.
  // upc => string[] of the supply chain movement
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Harvested,  // 0
    Processed,  // 1
    Packed,     // 2
    ForSale,    // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Purchased   // 7
    }

  State constant defaultState = State.Harvested;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFarmerID; // Metamask-Ethereum address of the Farmer - b/c they're using a browswer-client to interact with this DApp (need to think about accessability)
    string  originFarmName; // Farmer Name
    string  originFarmInformation;  // Farmer Information
    string  originFarmLatitude; // Farm Latitude
    string  originFarmLongitude;  // Farm Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address retailerID; // Metamask-Ethereum address of the Retailer
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Harvested(uint upc);
  event Processed(uint upc);
  event Packed(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);




// MODIFIERS SECTION //




  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == contractOwner, "Only the owner can do this");
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price, "More money is required, this is not enough to handle the transaction!");
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    // this structure (struct) gets this checkValue modifier to execute in the code after the function is called with _make_payable
    address payable consumerAddressPayable = _make_payable(items[_upc].consumerID);
    
    consumerAddressPayable.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Harvested
  modifier harvested(uint _upc) {
    require(items[_upc].itemState == State.Harvested, "This item hasn't been harvested yet.");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Processed
  modifier processed(uint _upc) {
    require(items[_upc].itemState == State.Processed, "This item hasn't been processed yet.");
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed, "This item isn't packed yet.");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale, "This item isn't for sale yet.");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold, "This item hasn't been sold yet.");
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped, "This item hasn't shipped yet.");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received, "This item hasn't been received yet.");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased, "This item hasn't been purchased yet.");
    _;
  }



// CONSTRUCTORS //




  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    contractOwner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == contractOwner) {
      address payable ownerAddressPayable = _make_payable(contractOwner);
      selfdestruct(ownerAddressPayable);
    }
  }

  // _make_payable function to address the above kill function
  function _make_payable(address x) internal pure returns (address payable) {
    // return address of uint160(x)
    return address(uint160(x));
  }




// FUNCTIONS SECTION //




  // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
  function harvestItem(
    uint _upc,
    address _originFarmerID,
    // Data location must be "memory" for parameter in functions below:
    string memory _originFarmName,
    string memory _originFarmInformation,
    string memory _originFarmLatitude,
    string memory _originFarmLongitude,
    string memory _productNotes) public onlyFarmer
  {
    // Add the new item as part of Harvest
    items[_upc] = Item({
        // Stock Keeping Unit (SKU):
        sku: sku,
        // Universal Product Code (UPC):
        upc: upc,
        // Metamask-Ethereum address of the current owner:
        ownerID: contractOwner,
        // Metamask-Ethereum address of Farmer:
        originFarmerID: _originFarmerID,
        // Farmer Name:
        originFarmName: _originFarmName,
        // Farmer Information:
        originFarmInformation: _originFarmInformation,
        // Farm Latitude:
        originFarmLatitude: _originFarmLatitude,
        // Farm Longitude:
        originFarmLongitude: _originFarmLongitude,
        // Product ID potentially a combination of upc + sku:
        productID: _upc + sku,
        // Product Notes:
        productNotes: _productNotes,
        // Product Price:
        productPrice: uint(0),
        // Product State as represented in the enum above:
        itemState: defaultState,
        // Metamask-Ethereum address of  Distributor:
        distributorID: address(0),
        // Metamask-Ethereum address of the Retailer:
        retailerID: address(0),
        // Metamask-Ethereum address of the Consumer:
        consumerID: address(0)
        });

    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    emit Harvested(_upc);
  }

  // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'

  function processItem(uint _upc)
  // Call modifier to check if upc has passed previous supply chain stage
  harvested(_upc)
  // Call modifier to verify caller of this function with onlyFarmer
  onlyFarmer
  // verify that this farmer is in the registry/list
  verifyCaller(items[_upc].originFarmerID)
  //verify this is the specific farmer for the UPC
  public {
    // Update the appropriate fields
    items[_upc].itemState = State.Processed;
    // Emit the appropriate event
    emit Processed(_upc);
   }



  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function packItem(uint _upc)
  // Call modifier to check if upc has passed previous supply chain stage
  processed(_upc)
  // Call modifier to verify caller of this function
  onlyFarmer
  // verify that this farmer is in the registry/list
  verifyCaller(items[_upc].originFarmerID)
  //verify this is the specific farmer for the UPC
  public {
    // Update the appropriate fields
    items[_upc].itemState = State.Packed;
    // Emit the appropriate event
    emit Packed(_upc);
  }




  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function sellItem(uint _upc, uint _price) 
  // Call modifier to check if upc has passed previous supply chain stage
  packed(_upc)
  // Call modifier to verify caller of this function
  onlyFarmer
  // verify that this farmer is in the registry/list
  verifyCaller(items[_upc].originFarmerID)
  //verify this is the specific farmer for the UPC
  public
  {
    // Update the appropriate fields
    // Need two fields below, one for the upc and one for the price:
    items[_upc].itemState = State.ForSale;
    items[_upc].productPrice = _price;
    // Emit the appropriate event
    emit ForSale(_upc);
  }



  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc)
    // Call modifier to check if upc has passed previous supply chain stage
    forSale(_upc)
    // Call modifer to check if buyer has paid enough
    paidEnough(items[_upc].productPrice)
    // Call modifer to send any excess ether back to buyer
    checkValue(_upc)
    // Call function to check if purchaser is in fact a Distributor:
    onlyDistributor
    // When it's the first time going through function, distributor is contractOwner that possesses all roles
    public payable 
    {
      // Update the appropriate fields - ownerID, distributorID, itemState
      items[_upc].ownerID = contractOwner;
      items[_upc].distributorID = msg.sender;
      items[_upc].itemState = State.Sold;
      
      // Transfer money to farmer
      address payable originFarmerAddressPayable = _make_payable(items[_upc].originFarmerID);
      
      originFarmerAddressPayable.transfer(msg.value);
      // emit the appropriate event
      emit Sold(_upc);
    }





  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipItem(uint _upc)  
    // Call modifier to check if upc has passed previous supply chain stage
    sold(_upc)
    // Call modifier to verify caller of this function and is on the allowed list:
    onlyDistributor
    // Verify
    verifyCaller(items[_upc].distributorID)
    //verify this is the specific distributor for the UPC
    public
    {
      // Update the appropriate fields
      items[_upc].itemState = State.Shipped;
      // Emit the appropriate event
      emit Shipped(_upc);
    }




  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _upc) 
    // Call modifier to check if upc has passed previous supply chain stage
    shipped (_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    onlyRetailer
    // Check on list:
    verifyCaller(items[_upc].retailerID)
    //verify this is the specific retailer for the UPC
    public
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].ownerID = contractOwner;
    items[_upc].retailerID = msg.sender;
    items[_upc].itemState = State.Received;
    // Emit the appropriate event
    emit Received(_upc);
  }




  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _upc)  
    // Call modifier to check if upc has passed previous supply chain stage
    received(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    onlyConsumer
    //verify this is the specific retailer for the UPC
    public
    {
    // Update the appropriate fields - ownerID, consumerID, itemState
    items[_upc].ownerID = contractOwner;
    items[_upc].consumerID = msg.sender;
    items[_upc].itemState = State.Purchased;
    // Emit the appropriate event
    emit Purchased(_upc);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originFarmerID,
  // NOTE: Data location must be "memory" for return parameter in function
  string memory originFarmName,
  string memory originFarmInformation,
  string memory originFarmLatitude,
  string memory originFarmLongitude
  ) 
  {
  // Assign values to the 8 parameters
  
  itemSKU = items[_upc].sku;
  
  itemUPC = items[_upc].upc;
  
  ownerID = items[_upc].ownerID;
  
  originFarmerID = items[_upc].originFarmerID;
  
  originFarmName = items[_upc].originFarmName;
  
  originFarmInformation = items[_upc].originFarmInformation;
  
  originFarmLatitude = items[_upc].originFarmLatitude;
  
  originFarmLongitude = items[_upc].originFarmLongitude;
    

  return 
  (
  itemSKU,
  itemUPC,
  ownerID,
  originFarmerID,
  originFarmName,
  originFarmInformation,
  originFarmLatitude,
  originFarmLongitude
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string memory productNotes,
  uint    productPrice,
  uint    itemState,
  address distributorID,
  address retailerID,
  address consumerID
  )
  {
    // Assign values to the 9 parameters

itemSKU = items[_upc].sku;
itemUPC = items[_upc].upc;
productID = items[_upc].productID;
productNotes = items[_upc].productNotes;
productPrice = items[_upc].productPrice;
itemState = uint(items[_upc].itemState);
distributorID = items[_upc].distributorID;
retailerID = items[_upc].retailerID;
consumerID = items[_upc].consumerID;

  return
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  itemState,
  distributorID,
  retailerID,
  consumerID
  );
  }
}
