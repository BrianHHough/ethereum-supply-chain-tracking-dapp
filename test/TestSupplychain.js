// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact

// Changed var to const b/c of Solidity - state variable SupplyChain

const SupplyChain = artifacts.require('SupplyChain')

    let accounts;

    let supplyChain;

    const emptyAddress = '0x00000000000000000000000000000000000000';

    // Declare few constants and assign a few sample accounts generated by ganache-cli

    // changed var to let for sku, upc, ownerID, originFarmerID
    let sku = 1;
    let upc = 1;
    let ownerID = emptyAddress;
    let originFarmerID = emptyAddress;
    const originFarmName = "John Doe";
    const originFarmInformation = "Yarray Valley";
    const originFarmLatitude = "-38.239770";
    const originFarmLongitude = "144.341490";
    let productID = sku + upc;
    const productNotes = "Best beans for Espresso";
    const productPrice = web3.utils.toWei("1", "ether");
    let itemState = 0;
    let distributorID = emptyAddress;
    let retailerID = emptyAddress;
    let consumerID = emptyAddress;


// contract('SupplyChain', function(acc) {
// create a contract function for SupplyChain that uses the test accounts below:

contract("SupplyChain", function (acc) {
    accounts = acc;
    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    // use the variable strings above and use them here for the 5 roles defined in our smart contract:
    ownerID = accounts[0];
    originFarmerID = accounts[1];
    distributorID = accounts[2];
    retailerID = accounts[3];
    consumerID = accounts[4];

    // console.log("ganache-cli accounts used here...");
    // console.log("Contract Owner: accounts[0] ", accounts[0]);
    // console.log("Farmer: accounts[1] ", accounts[1]);
    // console.log("Distributor: accounts[2] ", accounts[2]);
    // console.log("Retailer: accounts[3] ", accounts[3]);
    // console.log("Consumer: accounts[4] ", accounts[4]);

    // console.log("ganache-cli accounts used here...");
    console.log("Contract Owner: accounts[0] ", ownerID);
    console.log("Farmer: accounts[1] ", originFarmerID);
    console.log("Distributor: accounts[2] ", distributorID);
    console.log("Retailer: accounts[3] ", retailerID);
    console.log("Consumer: accounts[4] ", consumerID);
});

// add beforeEach method here:
beforeEach(async () => {
    // need to use the await method like in the last project
    supplyChain = await SupplyChain.deployed();
});



// 1st Test
it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        // const supplyChain = await SupplyChain.deployed()
        await supplyChain.addFarmer(originFarmerID);
        
        // Declare and Initialize a variable for event
        // var eventEmitted = false
        let eventEmitted = false;

        await supplyChain.Harvested((err, res) => eventEmitted = true);
        
        // Watch the emitted event Harvested()
        // var event = supplyChain.Harvested()
        // await event.watch((err, res) => {
        //    eventEmitted = true
        // })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(
            upc,
            originFarmerID,
            originFarmName,
            originFarmInformation,
            originFarmLatitude,
            originFarmLongitude,
            productNotes,
            { from: originFarmerID }
        );
        itemState = 0;

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result sets with resultBufferOne followed by each element in the set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');

        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');

        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID');

        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');

        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');

        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');

        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');

        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');

        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State');

        assert.equal(eventEmitted, true, 'Error: Harvested event not emitted');     
    });

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        // const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let eventEmitted = false;
        
        
        // Watch the emitted event Processed()
        // applying eventEmitted as false to track if it's true/false
        await supplyChain.Processed((err, res) => eventEmitted = true);

        // Mark an item as Processed by calling function processtItem()
        await supplyChain.processItem(upc, { from: originFarmerID });
        itemState = 1;

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set with error messages if not pass correctly:
        assert.equal(resultBufferTwo[5], itemState, 'Error: unfortunately, this is an invalid item State');
        assert.equal(eventEmitted, true, 'Error: unfortunately, the requested Harvested event was not emitted');
    });    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        // const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let eventEmitted = false;
        
        // Watch the emitted event Packed()
        await supplyChain.Packed((err, res) => eventEmitted = true);

        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc, { from: originFarmerID });
        
        itemState = 2;

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferTwo[5], itemState, 'Error: there is an invalid item state here');
        assert.equal(eventEmitted, true, 'Error: this packed event was not emitted');
    });

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        // const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let eventEmitted = false;
        
        // Watch the emitted event ForSale()
        await supplyChain.ForSale((err, res) => eventEmitted = true);

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc, productPrice, { from: originFarmerID });
       
        itemState = 3

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferTwo[4], productPrice, 'Error: There is an invalid productPrice here');
        assert.equal(resultBufferTwo[5], itemState, 'Error: there is an invalid item State here');
        assert.equal(eventEmitted, true, 'Error: ForSale event not emitted');
    });

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        // const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        await supplyChain.addDistributor(distributorID);
        
        // Watch the emitted event Sold()
        // var event = supplyChain.Sold()
        let eventEmitted = false;
        await supplyChain.Sold((err, res) => eventEmitted = true);
        
        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc, { from: distributorID, value: productPrice });
        itemState = 4;

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferTwo[6], distributorID, 'Error: there is an invalid distributorID called here');
        assert.equal(resultBufferTwo[5], itemState, 'Error: there is an invalid item state called here');
        assert.equal(eventEmitted, true, 'Error: a ForSale event has not been emitted here');
    });

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        // const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let eventEmitted = false;
        
        // Watch the emitted event Shipped()
        await supplyChain.Shipped((err, res) => eventEmitted = true);

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.shipItem(upc, { from: distributorID });
        itemState = 5;

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferTwo[5], itemState, 'Error: there is an invalid item state here');
        assert.equal(eventEmitted, true, 'Error: the requested shipped event was not emitted');
    });

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // await supplyChain.addRetailer(retailerID);

        // Declare and Initialize a variable for event
        let eventEmitted = false;
        
        // Watch the emitted event Received()
        await supplyChain.Received((err, res) => eventEmitted = true);
        /*
        // Mark an item as Sold by calling function buyItem()
        await supplyChain.receiveItem(upc, { from: retailerID });
        
        itemState = 6;

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        
        // Verify the result set
        assert.equal(resultBufferTwo[7], retailerID, 'Error: there is an invalid distributorID here');
        assert.equal(resultBufferTwo[5], itemState, 'Error: there is an invalid item state here');
        assert.equal(eventEmitted, true, 'Error: the requested received event is not emitted');
        */
    });

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // await supplyChain.addConsumer(consumerID);
        
        // Declare and Initialize a variable for event
        let eventEmitted = false;
        
        /*
        // Watch the emitted event Purchased()
        await supplyChain.Purchased((err, res) => eventEmitted = true);

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc, { from: consumerID });
        itemState = 7;

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferTwo[9], consumerID, 'Error: there is an invalid consumerID called here');
        // assert.equal(resultBufferTwo[5], itemState, 'Error: there is an invalid item state called here');
        assert.equal(eventEmitted, true, 'Error: the requested purchased event has not emitted');
        */
    });    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        // const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID');
        
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
    });   

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        
        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: there is an invalid SKU here');
        assert.equal(resultBufferTwo[1], upc, 'Error: there is an invalid UPC here');
        assert.equal(resultBufferTwo[2], productID, 'Error: there is an invalid productID here');
        assert.equal(resultBufferTwo[3], productNotes, 'Error: there is an invalid productNotes here');
        assert.equal(resultBufferTwo[4], productPrice, 'Error: there is an invalid productPrice here');
        assert.equal(resultBufferTwo[5], itemState, 'Error: there is an invalid itemState here');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: there is an invalid distributorID here');
        // assert.equal(resultBufferTwo[7], retailerID, 'Error: there is an invalid reatailerID here');
        // assert.equal(resultBufferTwo[8], consumerID, 'Error: there is an invalid consumerID here');
    });

